// Mostly generated via: https://transform.tools/json-to-rust-serde
use serde::{Deserialize, Serialize};

pub type Root = Vec<Root2>;

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Root2 {
    pub kind: String,
    pub data: Data,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data {
    pub after: serde_json::Value,
    pub dist: Option<i64>,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children {
    pub kind: String,
    pub data: Data2,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data2 {
    pub approved_at_utc: serde_json::Value,
    pub subreddit: String,
    pub selftext: Option<String>,
    pub user_reports: Vec<serde_json::Value>,
    pub saved: bool,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub clicked: Option<bool>,
    pub title: Option<String>,
    #[serde(default)]
    pub link_flair_richtext: Vec<serde_json::Value>,
    pub subreddit_name_prefixed: String,
    pub hidden: Option<bool>,
    pub pwls: Option<i64>,
    pub link_flair_css_class: Option<String>,
    pub downs: i64,
    pub top_awarded_type: serde_json::Value,
    pub parent_whitelist_status: Option<String>,
    pub hide_score: Option<bool>,
    pub name: String,
    pub quarantine: Option<bool>,
    pub link_flair_text_color: Option<String>,
    pub upvote_ratio: Option<f64>,
    pub author_flair_background_color: serde_json::Value,
    pub subreddit_type: String,
    pub ups: i64,
    pub total_awards_received: i64,
    pub media_embed: Option<MediaEmbed>,
    pub author_flair_template_id: Option<String>,
    pub is_original_content: Option<bool>,
    pub author_fullname: String,
    pub secure_media: serde_json::Value,
    pub is_reddit_media_domain: Option<bool>,
    pub is_meta: Option<bool>,
    pub category: serde_json::Value,
    pub secure_media_embed: Option<SecureMediaEmbed>,
    pub link_flair_text: Option<String>,
    pub can_mod_post: bool,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub is_created_from_ads_ui: Option<bool>,
    pub author_premium: bool,
    pub thumbnail: Option<String>,
    pub edited: bool,
    pub author_flair_css_class: Option<String>,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub gildings: Gildings,
    pub content_categories: serde_json::Value,
    pub is_self: Option<bool>,
    pub mod_note: serde_json::Value,
    pub created: f64,
    pub link_flair_type: Option<String>,
    pub wls: Option<i64>,
    pub removed_by_category: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub author_flair_type: String,
    pub domain: Option<String>,
    pub allow_live_comments: Option<bool>,
    pub selftext_html: Option<String>,
    pub likes: serde_json::Value,
    pub suggested_sort: serde_json::Value,
    pub banned_at_utc: serde_json::Value,
    pub view_count: serde_json::Value,
    pub archived: bool,
    pub no_follow: bool,
    pub is_crosspostable: Option<bool>,
    pub pinned: Option<bool>,
    #[serde(rename = "over_18")]
    pub over18: Option<bool>,
    pub all_awardings: Vec<serde_json::Value>,
    pub awarders: Vec<serde_json::Value>,
    pub media_only: Option<bool>,
    pub link_flair_template_id: Option<String>,
    pub can_gild: bool,
    pub spoiler: Option<bool>,
    pub locked: bool,
    pub author_flair_text: Option<String>,
    pub treatment_tags: Vec<serde_json::Value>,
    pub visited: Option<bool>,
    pub removed_by: serde_json::Value,
    pub num_reports: serde_json::Value,
    pub distinguished: serde_json::Value,
    pub subreddit_id: String,
    pub author_is_blocked: bool,
    pub mod_reason_by: serde_json::Value,
    pub removal_reason: serde_json::Value,
    pub link_flair_background_color: Option<String>,
    pub id: String,
    pub is_robot_indexable: Option<bool>,
    pub num_duplicates: Option<i64>,
    pub report_reasons: serde_json::Value,
    pub author: String,
    pub discussion_type: serde_json::Value,
    pub num_comments: Option<i64>,
    pub send_replies: bool,
    pub media: serde_json::Value,
    pub contest_mode: Option<bool>,
    pub author_patreon_flair: bool,
    pub author_flair_text_color: Option<String>,
    pub permalink: String,
    pub whitelist_status: Option<String>,
    pub stickied: bool,
    pub url: Option<String>,
    pub subreddit_subscribers: Option<i64>,
    pub created_utc: f64,
    pub num_crossposts: Option<i64>,
    pub mod_reports: Vec<serde_json::Value>,
    pub is_video: Option<bool>,
    pub comment_type: serde_json::Value,
    pub link_id: Option<String>,
    pub replies: Option<Replies>,
    pub collapsed_reason_code: serde_json::Value,
    pub parent_id: Option<String>,
    pub body: Option<String>,
    pub is_submitter: Option<bool>,
    pub collapsed: Option<bool>,
    pub body_html: Option<String>,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub score_hidden: Option<bool>,
    pub controversiality: Option<i64>,
    pub depth: Option<i64>,
    pub collapsed_because_crowd_control: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct MediaEmbed {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct SecureMediaEmbed {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies {
    pub kind: String,
    pub data: Data3,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data3 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children2>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children2 {
    pub kind: String,
    pub data: Data4,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data4 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: serde_json::Value,
    pub likes: serde_json::Value,
    pub replies: Replies2,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub collapsed: bool,
    pub body: String,
    pub edited: bool,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: serde_json::Value,
    pub is_submitter: bool,
    pub downs: i64,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings8,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: serde_json::Value,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: serde_json::Value,
    pub treatment_tags: Vec<serde_json::Value>,
    pub created_utc: f64,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies2 {
    pub kind: String,
    pub data: Data5,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data5 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children3>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children3 {
    pub kind: String,
    pub data: Data6,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data6 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: String,
    pub likes: serde_json::Value,
    pub replies: Replies3,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub created_utc: f64,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub body: String,
    pub edited: bool,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: String,
    pub is_submitter: bool,
    pub downs: i64,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings7,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: String,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: String,
    pub treatment_tags: Vec<serde_json::Value>,
    pub collapsed: bool,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies3 {
    pub kind: String,
    pub data: Data7,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data7 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children4>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children4 {
    pub kind: String,
    pub data: Data8,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data8 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: serde_json::Value,
    pub likes: serde_json::Value,
    pub replies: Replies4,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub body: String,
    pub edited: bool,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: serde_json::Value,
    pub downs: i64,
    pub is_submitter: bool,
    pub collapsed: bool,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings6,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: serde_json::Value,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: serde_json::Value,
    pub treatment_tags: Vec<serde_json::Value>,
    pub created_utc: f64,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies4 {
    pub kind: String,
    pub data: Data9,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data9 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children5>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children5 {
    pub kind: String,
    pub data: Data10,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data10 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: String,
    pub likes: serde_json::Value,
    pub replies: Replies5,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub collapsed: bool,
    pub body: String,
    pub edited: bool,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: String,
    pub is_submitter: bool,
    pub downs: i64,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings5,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: String,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: String,
    pub treatment_tags: Vec<serde_json::Value>,
    pub created_utc: f64,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies5 {
    pub kind: String,
    pub data: Data11,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data11 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children6>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children6 {
    pub kind: String,
    pub data: Data12,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data12 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: serde_json::Value,
    pub likes: serde_json::Value,
    pub replies: Replies6,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub created_utc: f64,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub body: String,
    pub edited: bool,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: serde_json::Value,
    pub is_submitter: bool,
    pub downs: i64,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings4,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: serde_json::Value,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: serde_json::Value,
    pub treatment_tags: Vec<serde_json::Value>,
    pub collapsed: bool,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies6 {
    pub kind: String,
    pub data: Data13,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data13 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children7>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children7 {
    pub kind: String,
    pub data: Data14,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data14 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: String,
    pub likes: serde_json::Value,
    pub replies: Replies7,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub body: String,
    pub edited: bool,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: String,
    pub downs: i64,
    pub is_submitter: bool,
    pub collapsed: bool,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings3,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: String,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: String,
    pub treatment_tags: Vec<serde_json::Value>,
    pub created_utc: f64,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Replies7 {
    pub kind: String,
    pub data: Data15,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data15 {
    pub after: serde_json::Value,
    pub dist: serde_json::Value,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Children8>,
    pub before: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Children8 {
    pub kind: String,
    pub data: Data16,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Data16 {
    pub total_awards_received: i64,
    pub approved_at_utc: serde_json::Value,
    pub author_is_blocked: bool,
    pub comment_type: serde_json::Value,
    pub awarders: Vec<serde_json::Value>,
    pub mod_reason_by: serde_json::Value,
    pub banned_by: serde_json::Value,
    pub ups: i64,
    pub author_flair_type: String,
    pub removal_reason: serde_json::Value,
    pub link_id: String,
    pub author_flair_template_id: serde_json::Value,
    pub likes: serde_json::Value,
    pub replies: String,
    pub author_fullname: String,
    pub saved: bool,
    pub id: String,
    pub banned_at_utc: serde_json::Value,
    pub mod_reason_title: serde_json::Value,
    pub gilded: i64,
    pub archived: bool,
    pub collapsed_reason_code: serde_json::Value,
    pub no_follow: bool,
    pub author: String,
    pub can_mod_post: bool,
    pub send_replies: bool,
    pub parent_id: String,
    pub score: i64,
    pub approved_by: serde_json::Value,
    pub report_reasons: serde_json::Value,
    pub author_premium: bool,
    pub all_awardings: Vec<serde_json::Value>,
    pub subreddit_id: String,
    pub collapsed: bool,
    pub body: String,
    pub edited: f64,
    pub user_reports: Vec<serde_json::Value>,
    pub author_flair_css_class: serde_json::Value,
    pub is_submitter: bool,
    pub downs: i64,
    pub author_flair_richtext: Vec<serde_json::Value>,
    pub author_patreon_flair: bool,
    pub body_html: String,
    pub gildings: Gildings2,
    pub collapsed_reason: serde_json::Value,
    pub associated_award: serde_json::Value,
    pub stickied: bool,
    pub subreddit_type: String,
    pub can_gild: bool,
    pub top_awarded_type: serde_json::Value,
    pub author_flair_text_color: serde_json::Value,
    pub score_hidden: bool,
    pub permalink: String,
    pub num_reports: serde_json::Value,
    pub locked: bool,
    pub name: String,
    pub created: f64,
    pub subreddit: String,
    pub author_flair_text: serde_json::Value,
    pub treatment_tags: Vec<serde_json::Value>,
    pub created_utc: f64,
    pub subreddit_name_prefixed: String,
    pub controversiality: i64,
    pub depth: i64,
    pub author_flair_background_color: serde_json::Value,
    pub collapsed_because_crowd_control: serde_json::Value,
    pub mod_reports: Vec<serde_json::Value>,
    pub mod_note: serde_json::Value,
    pub distinguished: serde_json::Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings2 {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings3 {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings4 {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings5 {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings6 {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings7 {}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Gildings8 {}
